{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "VestingResponse",
  "type": "object",
  "required": [
    "locked"
  ],
  "properties": {
    "locked": {
      "description": "The current amount locked. Always 0 if schedule is None",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "schedule": {
      "description": "The total vesting schedule",
      "anyOf": [
        {
          "$ref": "#/definitions/Curve"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "definitions": {
    "Curve": {
      "description": "Curve types",
      "oneOf": [
        {
          "description": "Constan curve, it will always have the same value",
          "type": "object",
          "required": [
            "constant"
          ],
          "properties": {
            "constant": {
              "type": "object",
              "required": [
                "y"
              ],
              "properties": {
                "y": {
                  "description": "Contanst value y",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Linear curve that grow linearly but later tends to a constant saturated value.",
          "type": "object",
          "required": [
            "saturating_linear"
          ],
          "properties": {
            "saturating_linear": {
              "$ref": "#/definitions/SaturatingLinear"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Curve with different slopes",
          "type": "object",
          "required": [
            "piecewise_linear"
          ],
          "properties": {
            "piecewise_linear": {
              "$ref": "#/definitions/PiecewiseLinear"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PiecewiseLinear": {
      "description": "This is a generalization of SaturatingLinear, steps must be arranged with increasing time [`u64`]. Any point before first step gets the first value, after last step the last value. Otherwise, it is a linear interpolation between the two closest points. Vec of length 1 -> [`Constant`](Curve::Constant) . Vec of length 2 -> [`SaturatingLinear`] .",
      "type": "object",
      "required": [
        "steps"
      ],
      "properties": {
        "steps": {
          "description": "steps",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/definitions/Uint128"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      }
    },
    "SaturatingLinear": {
      "description": "Saturating Linear $$f(x)=\\begin{cases} [min(y) * amount],  & \\text{if x <= $x_1$ } \\\\\\\\ [y * amount],  & \\text{if $x_1$ >= x <= $x_2$ } \\\\\\\\ [max(y) * amount],  & \\text{if x >= $x_2$ } \\end{cases}$$\n\nmin_y for all x <= min_x, max_y for all x >= max_x, linear in between",
      "type": "object",
      "required": [
        "max_x",
        "max_y",
        "min_x",
        "min_y"
      ],
      "properties": {
        "max_x": {
          "description": "time when curve has fully saturated",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "max_y": {
          "description": "max value at saturated time",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "min_x": {
          "description": "time when curve start",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "min_y": {
          "description": "min value at start time",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
